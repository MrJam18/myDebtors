export declare const organizationsSlice: import("@reduxjs/toolkit").Slice<{
    loading: boolean;
    list: any[];
    total: number;
    searchList: any[];
    error: boolean;
    newBanksRequisites: any;
    creditor: any;
}, {
    setSearchList(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setList(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchSuccess(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchError(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchPending(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setNewBanksRequisites(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setCreditor(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setDefaultCessionForCreditor(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
}, "organizations">;
export declare const creditorActions: import("@reduxjs/toolkit").CaseReducerActions<{
    setSearchList(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setList(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchSuccess(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchError(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    fetchPending(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setNewBanksRequisites(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setCreditor(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
    setDefaultCessionForCreditor(state: import("immer/dist/internal").WritableDraft<{
        loading: boolean;
        list: any[];
        total: number;
        searchList: any[];
        error: boolean;
        newBanksRequisites: any;
        creditor: any;
    }>, action: {
        payload: any;
        type: string;
    }): void;
}, "organizations">;
